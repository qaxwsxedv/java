# day06

제어 명령
==> 컴퓨터는 원칙적으로 코딩한 순서대로 실행함을 원칙으로 한다.
	하지만 프로그램을 만들다보면 이 순서를 바꿔야하는 경우가 가끔 존재한다.
	이럴때 사용하는 명령이
		"제어명령"
	이다.
	
	1. 조건 제어 명령
		==> 특정 조건에 따라서 실행순서를 변경하는 명령
			
			형식 ]
				if(조건식){
				
				}
				[
				[else if(조건식){
				
				}
				else if(조건식){
				
				}
				...]
				else {
				
				}
				]
				
			형식 1 ]
				(1)
				if(조건식(2)){
					실행내용.. (3)
				}
				(4)
				
				의미 ]
					조건식이 참이면(맞으면) 실행내용을 실행하세요.
					
				실생 순서 ]
					조건식이 참인 경우
						1 ---> 2 ---> 3 ---> 4
					
					조건식이 거짓인 경우
						1 ---> 2 ---> 4
						
	참고 ]
		자바의 명령을 보면 {} 이 존재하는 경우가 있다.
		이것을 우리는 "블럭 마크"라고 표현한다.
		의미는 실행 범위를 지정하는 것이다.
		
		이때 } 는 ;(토큰) 을 대신할 수 있다.
		
	참고 ]
		혹시 {} 안에 실행될 내용이 오직 한문장이면(한개의 명령으로 되어있으면)....
		이 경우는 블럭기호({})를 생략할 수도 있다.
		
			형식 2 ]
				(1)
				if(조건식 (2)){
					실행내용1 (3)
				} else {
					실행내용2 (4)
				}
				(5)
				
				의미 ]
					조건식이 참이면(맞으면) 실행내용1을 처리하고
					조건식이 거짓이면 실행내용2를 처리하세요.
					
				실행순서 ]
					조건식이 참인 경우
						1 ---> 2 ---> 3 ---> 5
						
					조건식이 거짓인 경우
						1 ---> 2 ---> 4 ---> 5
						
			형식 3 ]
				
				(1)
				if(조건식1 (2)){
					실행내용1 (3)
				} else if(조건식2 (4)) {
					실행내용2 (5)
				} else if(조건식3 (6)) {
					실행내용3 (7)
				}...
				
				} else {
					실행내용n (n)
				}
				m
				
				의미 ]
					조건식1이 참이면 실행내용 1을 실행하고
								거짓이면 조건식2가 참이면 실행내용2 를 실행하고
													거짓이면 조건식3이 참이면 실행내용3을 실행하고
													...
													위의 조건이 모두 거짓이면 실행내용n을 실행하세요.
				실행 순서 ]
					1 ---> 2 -- 참 --> 3 ---> m
							 --거짓--> 4 -- 참 --> 5 ---> m
							 			 --거짓--> 6 -- 참 --> 7 ---> m
							 			 			 --거짓--> n --...  ---> m
							 			 			 	앞의 조건들이 모두 거짓 ---> n ---> m
		
				참고 ]
					조건식2는 조건식1 이 거짓인 경우에만 읽게 된다.
					
				참고 ]
					if 명령도 중첩이 가능하다.
					
					if(조건식){
						...
						if(조건식){
							...
						}
					} else {
						if(조건식){
							...
						} else if(조건식) {
						
						} else {
							...
						}
					}
		
	2. 반복 제어 명령